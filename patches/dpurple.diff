diff --git a/src/xrCore/xrDebugNew.cpp b/src/xrCore/xrDebugNew.cpp
index dd65e49..79c6b65 100644
--- a/src/xrCore/xrDebugNew.cpp
+++ b/src/xrCore/xrDebugNew.cpp
@@ -67,6 +67,20 @@ XRCORE_API xrDebug Debug;
 
 static bool error_after_dialog = false;
 
+namespace crash_saving
+{
+    void (*save_impl)() = nullptr;
+	bool enabled = true;
+
+    void save()
+    {
+        if (enabled && save_impl != nullptr)
+        {
+            (*save_impl)();
+        }
+    }
+}
+
 //extern void BuildStackTrace();
 //extern char g_stackTrace[100][4096];
 //extern int g_stackTraceCount;
@@ -206,6 +220,9 @@ void xrDebug::do_exit(const std::string& message)
 void xrDebug::backend(const char* expression, const char* description, const char* argument0, const char* argument1,
                       const char* file, int line, const char* function, bool& ignore_always)
 {
+    // we save first
+    crash_saving::save();
+    
 	static xrCriticalSection CS
 #ifdef PROFILE_CRITICAL_SECTIONS
         (MUTEX_PROFILE_ID(xrDebug::backend))
diff --git a/src/xrGame/Level.cpp b/src/xrGame/Level.cpp
index 2f93a35..b1e4c6a 100644
--- a/src/xrGame/Level.cpp
+++ b/src/xrGame/Level.cpp
@@ -96,6 +96,74 @@ u16	GetSpawnInfo(NET_Packet &P, u16 &parent_id)
 #endif
 //-AVO
 
+namespace crash_saving {
+	extern void(*save_impl)();
+	static bool g_isSaving = false;
+	int saveCountMax = 10;
+
+	void _save_impl()
+	{
+		if (g_isSaving) return;
+		if (saveCountMax <= 0) return;
+
+		int saveCount = -1;
+		g_isSaving = true;
+		NET_Packet net_packet;
+		net_packet.w_begin(M_SAVE_GAME);
+
+		std::string path = "fatal_ctd_save_";
+		std::string path_mask(path);
+		std::string path_ext = ".scop";
+		path_mask.append("*").append(path_ext);
+
+		FS_FileSet fset_temp;
+		FS.file_list(fset_temp, "$game_saves$", FS_ListFiles | FS_RootOnly, path_mask.c_str());
+
+		std::vector<FS_File> fset(fset_temp.begin(), fset_temp.end());
+		struct {
+			bool operator()(FS_File& a, FS_File& b) {
+				return a.time_write > b.time_write;
+			}
+		} sortFilesDesc;
+		std::sort(fset.begin(), fset.end(), sortFilesDesc);
+
+		//Msg("save mask %s", path_mask.c_str());
+
+		for (auto &file : fset)
+		{
+			string128 name;
+			xr_strcpy(name, sizeof(name), file.name.c_str());
+			std::string name_string(name);
+			name_string.erase(name_string.length() - path_ext.length());
+
+			//Msg("found save file %s, save_name %s", name, name_string.c_str());
+
+			try {
+				//Msg("save number %s", name_string.substr(path.length()).c_str());
+				int name_count = std::stoi(name_string.substr(path.length()));
+				saveCount = name_count;
+				break;
+			} catch (...) {
+				Msg("!error getting save number from %s", name);
+			}
+		}
+
+		saveCount++;
+		if (saveCount >= saveCountMax) {
+			saveCount = 0;
+		}
+
+		path.append(std::to_string(saveCount));
+		net_packet.w_stringZ(path.c_str());
+		net_packet.w_u8(1);
+		CLevel& level = Level();
+		if (&level != nullptr)
+		{
+			level.Send(net_packet, net_flags(1));
+		}
+
+	}
+}
 
 CLevel::CLevel() :
 	IPureClient(Device.GetTimerGlobal())
@@ -141,12 +209,14 @@ CLevel::CLevel() :
 	g_player_hud = xr_new<player_hud>();
 	g_player_hud->load_default();
 	Msg("%s", Core.Params);
+	crash_saving::save_impl = crash_saving::_save_impl; // CLevel ready, we can save now
 }
 
 extern CAI_Space* g_ai_space;
 
 CLevel::~CLevel()
 {
+	crash_saving::save_impl = nullptr; // CLevel not available, disable crash save
 	xr_delete(g_player_hud);
 	delete_data(hud_zones_list);
 	hud_zones_list = nullptr;
diff --git a/src/xrGame/console_commands.cpp b/src/xrGame/console_commands.cpp
index 2841970..a5f63e1 100644
--- a/src/xrGame/console_commands.cpp
+++ b/src/xrGame/console_commands.cpp
@@ -1998,6 +1998,43 @@ public:
 	}
 };
 
+namespace crash_saving {
+	extern bool enabled;
+	extern int saveCountMax;
+}
+
+class CCC_ToggleCrashSaving : public IConsole_Command
+{
+public:
+	CCC_ToggleCrashSaving(LPCSTR N) : IConsole_Command(N) { bEmptyArgsHandled = false; };
+
+	virtual void Execute(LPCSTR args)
+	{
+		if (EQ(args, "on")) crash_saving::enabled = true;
+		else if (EQ(args, "off")) crash_saving::enabled = false;
+		else if (EQ(args, "1")) crash_saving::enabled = true;
+		else if (EQ(args, "0")) crash_saving::enabled = false;
+		else InvalidSyntax();
+	}
+
+	virtual void Status(TStatus& S)
+	{
+		xr_strcpy(S, crash_saving::enabled ? "on" : "off");
+	}
+
+	virtual void Info(TInfo& I)
+	{
+		xr_strcpy(I, "'on/off' or '1/0'");
+	}
+
+	virtual void fill_tips(vecTips& tips, u32 mode)
+	{
+		TStatus str;
+		xr_sprintf(str, sizeof(str), "%s (current) [on/off]", crash_saving::enabled ? "on" : "off");
+		tips.push_back(str);
+	}
+};
+
 void CCC_RegisterCommands()
 {
 	//Not needed for a singleplayer-only mod
@@ -2507,6 +2544,9 @@ void CCC_RegisterCommands()
 	CMD3(CCC_Token, "g_dead_body_collision", &g_dead_body_collision, dead_body_collision_tokens);
 	CMD3(CCC_Mask, "g_feel_grenade", &psDeviceFlags2, rsFeelGrenade);
 	CMD3(CCC_Mask, "g_always_active", &psDeviceFlags2, rsAlwaysActive);
+	//Toggle crash saving
+	CMD1(CCC_ToggleCrashSaving, "crash_save");
+	CMD4(CCC_Integer, "crash_save_count", &crash_saving::saveCountMax, 0, 20);
 
 	if (strstr(Core.Params, "-dbgdev"))
 		CMD4(CCC_Float, "g_streff", &streff, -10.f, 10.f);
diff --git a/src/xrGame/ui/UILines.cpp b/src/xrGame/ui/UILines.cpp
index d639789..44b48a1 100644
--- a/src/xrGame/ui/UILines.cpp
+++ b/src/xrGame/ui/UILines.cpp
@@ -7,6 +7,7 @@
 // Copyright 2005 GSC Game World
 
 #include "StdAfx.h"
+#include <cstdio>
 
 #include "UILines.h"
 #include "UIXmlInit.h"
@@ -158,7 +159,12 @@ void CUILines::ParseText(bool force)
 				{
 					bNewLines = TRUE;
 					*pszTemp = '\0';
-					ptmp_line->AddSubLine(pszSearch, tcolor);
+					CUISubLine subline;
+					subline.m_text = pszSearch;
+					subline.m_color = tcolor;
+					subline.m_last_in_line = true;
+					//ptmp_line->AddSubLine(pszSearch, tcolor);
+					ptmp_line->AddSubLine(&subline);
 					pszSearch = pszTemp + 2;
 				}
 				ptmp_line->AddSubLine(pszSearch, tcolor);
@@ -201,8 +207,9 @@ void CUILines::ParseText(bool force)
 		{
 			for (int i = 0; i < vsz; i++)
 			{
-				const char* pszText = line->m_subLines[i].m_text.c_str();
-				const u32 tcolor = line->m_subLines[i].m_color;
+				CUISubLine* pSubLine = &line->m_subLines[i];
+				const char* pszText = pSubLine->m_text.c_str();
+				const u32 tcolor = pSubLine->m_color;
 				u16 uFrom = 0, uPartLen = 0;
 				VERIFY(pszText);
 				u16 nMarkers = m_pFont->SplitByWidth(aMarkers, UBUFFER_SIZE, fTargetWidth, pszText);
@@ -222,8 +229,11 @@ void CUILines::ParseText(bool force)
 				}
 				strncpy_s(szTempLine, pszText + uFrom, MAX_MB_CHARS);
 				tmp_line.AddSubLine(szTempLine, tcolor);
-				m_lines.push_back(tmp_line);
-				tmp_line.Clear();
+				if (pSubLine->m_last_in_line || i == (vsz -1))
+				{
+					m_lines.push_back(tmp_line);
+					tmp_line.Clear();
+				}
 			}
 		}
 	}
