diff --git a/src/xrEngine/FDemoRecord.cpp b/src/xrEngine/FDemoRecord.cpp
index aa96cfb..0499b90 100644
--- a/src/xrEngine/FDemoRecord.cpp
+++ b/src/xrEngine/FDemoRecord.cpp
@@ -20,7 +20,8 @@ BOOL stored_cross;
 BOOL stored_red_text;
 
 CDemoRecord* xrDemoRecord = 0;
-CDemoRecord::force_position CDemoRecord::g_position = {false, {0, 0, 0}};
+CDemoRecord::force_position CDemoRecord::g_position = { false, {0, 0, 0} };
+CDemoRecord::force_direction CDemoRecord::g_direction = {false, {0, 0, 0}};
 
 Fbox curr_lm_fbox;
 
@@ -77,6 +78,8 @@ CDemoRecord::CDemoRecord(const char* name, float life_time) : CEffectorCam(cefDe
 	m_b_redirect_input_to_level = false;
 	_unlink(name);
 	file = FS.w_open(name);
+	isInputBlocked = FALSE;
+	pDemoRecords = nullptr;
 	if (file)
 	{
 		g_position.set_position = false;
@@ -123,6 +126,23 @@ CDemoRecord::CDemoRecord(const char* name, float life_time) : CEffectorCam(cefDe
 	}
 }
 
+CDemoRecord::CDemoRecord(const char* name, std::unordered_set<CDemoRecord*>* pDemoRecords, BOOL isInputBlocked, float life_time) : CDemoRecord(name, life_time)
+{
+	pDemoRecords->insert(this);
+	this->pDemoRecords = pDemoRecords;
+	this->isInputBlocked = isInputBlocked;
+	if (!file) {
+		StopDemo();
+	}
+}
+
+void CDemoRecord::StopDemo() {
+	fLifeTime = -1;
+	if (pDemoRecords) {
+		pDemoRecords->erase(this);
+	}
+}
+
 CDemoRecord::~CDemoRecord()
 {
 	if (file)
@@ -130,6 +150,9 @@ CDemoRecord::~CDemoRecord()
 		IR_Release(); // release input
 		FS.w_close(file);
 	}
+	if (pDemoRecords) {
+		pDemoRecords->erase(this);
+	}
 	g_bDisableRedText = stored_red_text;
 
 	Device.seqRender.Remove(this);
@@ -372,6 +395,13 @@ BOOL CDemoRecord::ProcessCam(SCamEffectorInfo& info)
 		}
 		else
 			g_position.p.set(m_Position);
+
+		if (g_direction.set_direction)
+		{
+			m_HPB.set(g_direction.d);
+			g_direction.set_direction = false;
+		} else
+			g_direction.d.set(m_Position);
 		// move
 		Fvector vmove;
 
@@ -399,6 +429,9 @@ BOOL CDemoRecord::ProcessCam(SCamEffectorInfo& info)
 		info.p.set(m_Camera.c);
 
 		fLifeTime -= Device.fTimeDelta;
+		if (fLifeTime < 0) {
+			StopDemo();
+		}
 
 		m_vT.set(0, 0, 0);
 		m_vR.set(0, 0, 0);
@@ -420,43 +453,54 @@ void CDemoRecord::IR_OnMouseRelease(int btn)
 
 void CDemoRecord::IR_OnKeyboardPress(int dik)
 {
-	if (dik == DIK_MULTIPLY) m_b_redirect_input_to_level = !m_b_redirect_input_to_level;
-
-	if (m_b_redirect_input_to_level)
-	{
-		g_pGameLevel->IR_OnKeyboardPress(dik);
-		return;
-	}
-	if (dik == DIK_GRAVE)
-		Console->Show();
-	if (dik == DIK_SPACE) RecordKey();
-	if (dik == DIK_BACK) MakeCubemap();
-	if (dik == DIK_F11) MakeLevelMapScreenshot(IR_GetKeyState(DIK_LCONTROL));
-	if (dik == DIK_F12) MakeScreenshot();
-	if (dik == DIK_ESCAPE) fLifeTime = -1;
-
-	//Alundaio: Teleport to demo cam
-	//#ifndef MASTER_GOLD
-	if (dik == DIK_RETURN)
-	{
-		if (strstr(Core.Params, "-dbg"))
+	if (isInputBlocked) {
+		if (dik == DIK_PAUSE)
+			Device.Pause(!Device.Paused(), TRUE, TRUE, "demo_record");
+		if (dik == DIK_GRAVE)
+			Console->Show();
+		if (dik == DIK_ESCAPE)
+			Console->Execute("main_menu on");
+	} else {
+		if (dik == DIK_MULTIPLY) m_b_redirect_input_to_level = !m_b_redirect_input_to_level;
+
+		if (m_b_redirect_input_to_level)
 		{
-			if (g_pGameLevel->CurrentEntity())
+			g_pGameLevel->IR_OnKeyboardPress(dik);
+			return;
+		}
+		if (dik == DIK_GRAVE)
+			Console->Show();
+		if (dik == DIK_SPACE) RecordKey();
+		if (dik == DIK_BACK) MakeCubemap();
+		if (dik == DIK_F11) MakeLevelMapScreenshot(IR_GetKeyState(DIK_LCONTROL));
+		if (dik == DIK_F12) MakeScreenshot();
+		if (dik == DIK_ESCAPE) StopDemo();
+
+		//Alundaio: Teleport to demo cam
+		//#ifndef MASTER_GOLD
+		if (dik == DIK_RETURN)
+		{
+			if (strstr(Core.Params, "-dbg"))
 			{
-				g_pGameLevel->CurrentEntity()->ForceTransform(m_Camera);
-				fLifeTime = -1;
+				if (g_pGameLevel->CurrentEntity())
+				{
+					g_pGameLevel->CurrentEntity()->ForceTransform(m_Camera);
+					StopDemo();
+				}
 			}
 		}
-	}
-	//#endif // #ifndef MASTER_GOLD
-	//-Alundaio
+		//#endif // #ifndef MASTER_GOLD
+		//-Alundaio
 
-	if (dik == DIK_PAUSE)
-		Device.Pause(!Device.Paused(), TRUE, TRUE, "demo_record");
+		if (dik == DIK_PAUSE)
+			Device.Pause(!Device.Paused(), TRUE, TRUE, "demo_record");
+	}
+	
 }
 
 void CDemoRecord::IR_OnKeyboardRelease(int dik)
 {
+	if (isInputBlocked) return;
 	if (m_b_redirect_input_to_level)
 		g_pGameLevel->IR_OnKeyboardRelease(dik);
 }
@@ -471,6 +515,7 @@ static void update_whith_timescale(Fvector& v, const Fvector& v_delta)
 
 void CDemoRecord::IR_OnKeyboardHold(int dik)
 {
+	if (isInputBlocked) return;
 	if (m_b_redirect_input_to_level)
 	{
 		g_pGameLevel->IR_OnKeyboardHold(dik);
@@ -526,6 +571,7 @@ void CDemoRecord::IR_OnKeyboardHold(int dik)
 
 void CDemoRecord::IR_OnMouseMove(int dx, int dy)
 {
+	if (isInputBlocked) return;
 	if (m_b_redirect_input_to_level)
 	{
 		g_pGameLevel->IR_OnMouseMove(dx, dy);
@@ -545,6 +591,7 @@ void CDemoRecord::IR_OnMouseMove(int dx, int dy)
 
 void CDemoRecord::IR_OnMouseHold(int btn)
 {
+	if (isInputBlocked) return;
 	if (m_b_redirect_input_to_level)
 	{
 		g_pGameLevel->IR_OnMouseHold(btn);
diff --git a/src/xrEngine/FDemoRecord.h b/src/xrEngine/FDemoRecord.h
index 2e8de06..5890079 100644
--- a/src/xrEngine/FDemoRecord.h
+++ b/src/xrEngine/FDemoRecord.h
@@ -6,6 +6,8 @@
 #include "iinputreceiver.h"
 #include "effector.h"
 
+#include <unordered_set>
+
 class ENGINE_API CDemoRecord :
 	public CEffectorCam,
 	public IInputReceiver,
@@ -18,6 +20,12 @@ private:
 		Fvector p;
 	} g_position;
 
+	static struct force_direction
+	{
+		bool set_direction;
+		Fvector d;
+	} g_direction;
+
 	int iCount;
 	IWriter* file;
 	Fvector m_HPB;
@@ -44,6 +52,9 @@ private:
 	float m_fAngSpeed2;
 	float m_fAngSpeed3;
 
+	BOOL isInputBlocked;
+	std::unordered_set<CDemoRecord*>* pDemoRecords;
+
 	void MakeCubeMapFace(Fvector& D, Fvector& N);
 	void MakeLevelMapProcess();
 	void MakeScreenshotFace();
@@ -53,6 +64,7 @@ private:
 	void MakeLevelMapScreenshot(BOOL bHQ);
 public:
 	CDemoRecord(const char* name, float life_time = 60 * 60 * 1000);
+	CDemoRecord(const char* name, std::unordered_set<CDemoRecord*>* pDemoRecords, BOOL isInputBlocked = 0, float life_time = 60 * 60 * 1000);
 	virtual ~CDemoRecord();
 
 	virtual void IR_OnKeyboardPress(int dik);
@@ -62,10 +74,13 @@ public:
 	virtual void IR_OnMouseHold(int btn);
 	virtual void IR_OnMousePress(int btn);
 	virtual void IR_OnMouseRelease(int btn);
+	void StopDemo();
 
 	virtual BOOL ProcessCam(SCamEffectorInfo& info);
 	static void SetGlobalPosition(const Fvector& p) { g_position.p.set(p), g_position.set_position = true; }
 	static void GetGlobalPosition(Fvector& p) { p.set(g_position.p); }
+	static void SetGlobalDirection(const Fvector& d) { g_direction.d.set(d), g_direction.set_direction = true; }
+	static void GetGlobalDirection(Fvector& d) { d.set(g_direction.d); }
 	BOOL m_b_redirect_input_to_level;
 	virtual void OnRender();
 };
diff --git a/src/xrGame/console_commands.cpp b/src/xrGame/console_commands.cpp
index 2841970..bb369d7 100644
--- a/src/xrGame/console_commands.cpp
+++ b/src/xrGame/console_commands.cpp
@@ -1,3 +1,4 @@
+#include <unordered_set>
 #include "pch_script.h"
 #include "../xrEngine/xr_ioconsole.h"
 #include "../xrEngine/xr_ioc_cmd.h"
@@ -458,6 +459,7 @@ public:
 };
 
 //-----------------------------------------------------------------------
+std::unordered_set<CDemoRecord*> pDemoRecords;
 class CCC_DemoRecord : public IConsole_Command
 {
 public:
@@ -482,7 +484,55 @@ public:
 		string_path fn;
 		FS.update_path(fn, "$game_saves$", fn_);
 
-		g_pGameLevel->Cameras().AddCamEffector(xr_new<CDemoRecord>(fn));
+		auto pDemoRecord = xr_new<CDemoRecord>(fn, &pDemoRecords);
+		g_pGameLevel->Cameras().AddCamEffector(pDemoRecord);
+	}
+};
+
+class CCC_DemoRecordBlockedInput : public IConsole_Command
+{
+public:
+
+	CCC_DemoRecordBlockedInput(LPCSTR N) : IConsole_Command(N)
+	{
+	};
+
+	virtual void Execute(LPCSTR args)
+	{
+#ifndef	DEBUG
+		//if (GameID() != eGameIDSingle)
+		//{
+		//	Msg("For this game type Demo Record is disabled.");
+		//	return;
+		//};
+#endif
+		Console->Hide();
+
+		LPSTR fn_;
+		STRCONCAT(fn_, args, ".xrdemo");
+		string_path fn;
+		FS.update_path(fn, "$game_saves$", fn_);
+
+		auto pDemoRecord = xr_new<CDemoRecord>(fn, &pDemoRecords, TRUE);
+		g_pGameLevel->Cameras().AddCamEffector(pDemoRecord);
+	}
+};
+
+class CCC_DemoRecordStop : public IConsole_Command
+{
+public:
+
+	CCC_DemoRecordStop(LPCSTR N) : IConsole_Command(N)
+	{
+		bEmptyArgsHandled = true;
+	};
+
+	virtual void Execute(LPCSTR args)
+	{
+		for (auto pDemoRecord : pDemoRecords) {
+			pDemoRecord->StopDemo();
+		}
+		pDemoRecords.clear();
 	}
 };
 
@@ -515,6 +565,35 @@ public:
 
 Fvector CCC_DemoRecordSetPos::p = {0, 0, 0};
 
+class CCC_DemoRecordSetDir : public CCC_Vector3
+{
+	static Fvector d;
+public:
+
+	CCC_DemoRecordSetDir(LPCSTR N) : CCC_Vector3(N, &d, Fvector().set(-FLT_MAX, -FLT_MAX, -FLT_MAX),
+		Fvector().set(FLT_MAX, FLT_MAX, FLT_MAX))
+	{
+	};
+
+	virtual void Execute(LPCSTR args)
+	{
+#ifndef	DEBUG
+		//if (GameID() != eGameIDSingle)
+		//{
+		//	Msg("For this game type Demo Record is disabled.");
+		//	return;
+		//};
+#endif
+		CDemoRecord::GetGlobalDirection(d);
+		CCC_Vector3::Execute(args);
+		CDemoRecord::SetGlobalDirection(d);
+	}
+
+	virtual void Save(IWriter* F) { ; }
+};
+
+Fvector CCC_DemoRecordSetDir::d = { 0, 0, 0 };
+
 class CCC_DemoPlay : public IConsole_Command
 {
 public:
@@ -2072,7 +2151,10 @@ void CCC_RegisterCommands()
 	//#ifndef MASTER_GOLD
 	CMD1(CCC_DemoPlay, "demo_play");
 	CMD1(CCC_DemoRecord, "demo_record");
+	CMD1(CCC_DemoRecordBlockedInput, "demo_record_blocked_input");
+	CMD1(CCC_DemoRecordStop, "demo_record_stop");
 	CMD1(CCC_DemoRecordSetPos, "demo_set_cam_position");
+	CMD1(CCC_DemoRecordSetDir, "demo_set_cam_direction");
 	//#endif // #ifndef MASTER_GOLD
 
 #ifndef MASTER_GOLD
